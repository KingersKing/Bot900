-- Auto Rejoin + Reattach (client-side LocalScript)

-- LOADER URLs
local autorob_loader = "https://raw.githubusercontent.com/BlitzIsKing/UniversalFarm/refs/heads/main/Jailbreak/autoRob"
local loader_url     = "https://raw.githubusercontent.com/KingersKing/Bot900/main/rawr"

-- Rejoin interval (seconds)
local REJOIN_INTERVAL = 3600 -- 1 hour
local COUNTDOWN_SECONDS = 0  -- countdown before teleport (0 = disabled)

local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- ================= INITIAL ONE-TIME INJECTION =================
local function safeLoad(url)
    pcall(function()
        local body = game:HttpGet(url)
        local f = loadstring(body)
        if f then
            f()
        end
    end)
end

-- Run both on first execution
safeLoad(autorob_loader)
safeLoad(loader_url)

-- =============================================================

-- Builds payload that runs again after rejoin
local function buildPayload(urls)
    local combined = {}
    for _, u in ipairs(urls) do
        table.insert(combined, ([[ 
            pcall(function()
                local function httpGet(u)
                    if type(syn) == "table" and type(syn.request) == "function" then
                        local ok, r = pcall(syn.request, {Url = u, Method = "GET"})
                        if ok and r and r.Body then return r.Body end
                    end
                    if type(http_request) == "function" then
                        local ok, r = pcall(http_request, {Url = u, Method = "GET"})
                        if ok and r and r.Body then return r.Body end
                    end
                    if type(httpget) == "function" then
                        local ok, r = pcall(httpget, u)
                        if ok then return r end
                    end
                    if type(game.HttpGet) == "function" then
                        local ok, r = pcall(function() return game:HttpGet(u) end)
                        if ok then return r end
                    end
                    return nil
                end

                local body = httpGet(%q)
                if body then
                    local f = (loadstring and loadstring(body)) or (load and load(body))
                    if f then pcall(f) end
                end
            end)
        ]]):format(u))
    end
    return table.concat(combined, "\n")
end

-- Try to queue the payload for teleport
local function tryQueueOnTeleport(code)
    local ok, ret
    ok, ret = pcall(function()
        if type(syn) == "table" and type(syn.queue_on_teleport) == "function" then
            syn.queue_on_teleport(code); return true
        end
    end)
    if ok and ret == true then return true end

    ok, ret = pcall(function()
        if type(queue_on_teleport) == "function" then
            queue_on_teleport(code); return true
        end
    end)
    if ok and ret == true then return true end

    ok, ret = pcall(function()
        if type(shared) == "table" and type(shared.queue_on_teleport) == "function" then
            shared.queue_on_teleport(code); return true
        end
    end)
    if ok and ret == true then return true end

    return false
end

-- Notification helper
local function notify(msg)
    pcall(function()
        if game:GetService("StarterGui"):IsLoaded() then
            game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
                Text = "[AutoRejoin] " .. tostring(msg);
                Color = Color3.fromRGB(140, 200, 255);
                Font = Enum.Font.SourceSansBold;
                FontSize = Enum.FontSize.Size18;
            })
        end
    end)
end

-- Main loop
task.spawn(function()
    while true do
        task.wait(REJOIN_INTERVAL)

        -- queue both scripts for rejoin
        local payload = buildPayload({autorob_loader, loader_url})
        local queued = tryQueueOnTeleport(payload)

        if not queued then
            notify("Warning: queue_on_teleport not detected. Reattach may fail on next join.")
        else
            notify("Reattach payload queued successfully.")
        end

        -- optional countdown
        if COUNTDOWN_SECONDS > 0 then
            for i = COUNTDOWN_SECONDS, 1, -1 do
                notify(("Rejoining in %d..."):format(i))
                task.wait(1)
            end
        else
            task.wait(0.1)
        end

        -- teleport to same place
        local success, err = pcall(function()
            TeleportService:Teleport(game.PlaceId, player)
        end)
        if not success then
            notify("Teleport failed: " .. tostring(err))
            task.wait(10)
        end
    end
end)
